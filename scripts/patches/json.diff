From d68baa42bb82374b2a8f5292d2cc4fb2dcf57f95 Mon Sep 17 00:00:00 2001
From: Min Jin <minkimzz@amazon.com>
Date: Fri, 7 Feb 2025 10:12:44 -0800
Subject: [PATCH] fix & manually apply JSON patch

Signed-off-by: Min Jin <minkimzz@amazon.com>
---
 .../io/kubernetes/client/openapi/JSON.java    | 120 +++++++++++-------
 1 file changed, 72 insertions(+), 48 deletions(-)

diff --git a/kubernetes/src/main/java/io/kubernetes/client/openapi/JSON.java b/kubernetes/src/main/java/io/kubernetes/client/openapi/JSON.java
index 811bc84b9..ad2193a1a 100644
--- a/kubernetes/src/main/java/io/kubernetes/client/openapi/JSON.java
+++ b/kubernetes/src/main/java/io/kubernetes/client/openapi/JSON.java
@@ -14,79 +14,102 @@ package io.kubernetes.client.openapi;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import com.google.gson.TypeAdapter;
-import com.google.gson.internal.bind.util.ISO8601Utils;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
-import com.google.gson.JsonElement;
 import io.gsonfire.GsonFireBuilder;
-import io.gsonfire.TypeSelector;
-
-import io.kubernetes.client.openapi.models.*;
-import okio.ByteString;
-
+import io.kubernetes.client.gson.V1StatusPreProcessor;
+import io.kubernetes.client.openapi.models.V1Status;
 import java.io.IOException;
 import java.io.StringReader;
 import java.lang.reflect.Type;
 import java.text.DateFormat;
 import java.text.ParseException;
-import java.text.ParsePosition;
+import java.time.Instant;
 import java.time.LocalDate;
 import java.time.OffsetDateTime;
 import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.ChronoField;
 import java.util.Date;
-import java.util.Locale;
 import java.util.Map;
-import java.util.HashMap;
+import okio.ByteString;
 
 public class JSON {
+
     private Gson gson;
+
     private boolean isLenientOnJson = false;
+
+    private static final DateTimeFormatter RFC3339MICRO_FORMATTER =
+            new DateTimeFormatterBuilder()
+                    .parseDefaulting(ChronoField.OFFSET_SECONDS, 0)
+                    .append(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"))
+                    .optionalStart()
+                    .appendFraction(ChronoField.NANO_OF_SECOND, 6, 6, true)
+                    .optionalEnd()
+                    .appendOffsetId()
+                    .toFormatter();
+
     private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
+
     private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
-    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
+
+    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
+            new OffsetDateTimeTypeAdapter(RFC3339MICRO_FORMATTER);
+
     private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
+
     private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();
 
     public static GsonBuilder createGson() {
-        GsonFireBuilder fireBuilder = new GsonFireBuilder()
-        ;
-        GsonBuilder builder = fireBuilder.createGsonBuilder();
+        GsonFireBuilder fireBuilder = new GsonFireBuilder();
+        GsonBuilder builder =
+                fireBuilder
+                        .registerPreProcessor(V1Status.class, new V1StatusPreProcessor())
+                        .createGsonBuilder();
         return builder;
     }
 
     private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
         JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
         if (null == element) {
-            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
+            throw new IllegalArgumentException(
+                    "missing discriminator field: <" + discriminatorField + ">");
         }
         return element.getAsString();
     }
 
     /**
-     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
+     * Returns the Java class that implements the OpenAPI schema for the specified discriminator
+     * value.
      *
      * @param classByDiscriminatorValue The map of discriminator values to Java classes.
      * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
      * @return The Java class that implements the OpenAPI schema
      */
-    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
+    private static Class getClassByDiscriminator(
+            Map classByDiscriminatorValue, String discriminatorValue) {
         Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
         if (null == clazz) {
-            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
+            throw new IllegalArgumentException(
+                    "cannot determine model class of name: <" + discriminatorValue + ">");
         }
         return clazz;
     }
 
     public JSON() {
-        gson = createGson()
-            .registerTypeAdapter(Date.class, dateTypeAdapter)
-            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
-            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
-            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
-            .registerTypeAdapter(byte[].class, byteArrayAdapter)
-            .create();
+        gson =
+                createGson()
+                        .registerTypeAdapter(Date.class, dateTypeAdapter)
+                        .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
+                        .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
+                        .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
+                        .registerTypeAdapter(byte[].class, byteArrayAdapter)
+                        .create();
     }
 
     /**
@@ -127,8 +150,8 @@ public class JSON {
     /**
      * Deserialize the given JSON string to Java object.
      *
-     * @param <T>        Type
-     * @param body       The JSON string
+     * @param <T> Type
+     * @param body The JSON string
      * @param returnType The type to deserialize into
      * @return The deserialized Java object
      */
@@ -137,7 +160,8 @@ public class JSON {
         try {
             if (isLenientOnJson) {
                 JsonReader jsonReader = new JsonReader(new StringReader(body));
-                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
+                // see
+                // https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                 jsonReader.setLenient(true);
                 return gson.fromJson(jsonReader, returnType);
             } else {
@@ -154,18 +178,19 @@ public class JSON {
         }
     }
 
-    /**
-     * Gson TypeAdapter for Byte Array type
-     */
+    /** Gson TypeAdapter for Byte Array type */
     public class ByteArrayAdapter extends TypeAdapter<byte[]> {
 
         @Override
         public void write(JsonWriter out, byte[] value) throws IOException {
+            boolean oldHtmlSafe = out.isHtmlSafe();
+            out.setHtmlSafe(false);
             if (value == null) {
                 out.nullValue();
             } else {
                 out.value(ByteString.of(value).base64());
             }
+            out.setHtmlSafe(oldHtmlSafe);
         }
 
         @Override
@@ -182,9 +207,7 @@ public class JSON {
         }
     }
 
-    /**
-     * Gson TypeAdapter for JSR310 OffsetDateTime type
-     */
+    /** Gson TypeAdapter for JSR310 OffsetDateTime type */
     public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {
 
         private DateTimeFormatter formatter;
@@ -219,16 +242,19 @@ public class JSON {
                 default:
                     String date = in.nextString();
                     if (date.endsWith("+0000")) {
-                        date = date.substring(0, date.length()-5) + "Z";
+                        date = date.substring(0, date.length() - 5) + "Z";
+                    }
+                    try {
+                        return OffsetDateTime.parse(date, formatter);
+                    } catch (DateTimeParseException e) {
+                        // backward-compatibility for ISO8601 timestamp format
+                        return OffsetDateTime.parse(date, DateTimeFormatter.ISO_OFFSET_DATE_TIME);
                     }
-                    return OffsetDateTime.parse(date, formatter);
             }
         }
     }
 
-    /**
-     * Gson TypeAdapter for JSR310 LocalDate type
-     */
+    /** Gson TypeAdapter for JSR310 LocalDate type */
     public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {
 
         private DateTimeFormatter formatter;
@@ -278,9 +304,8 @@ public class JSON {
     }
 
     /**
-     * Gson TypeAdapter for java.sql.Date type
-     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
-     * (more efficient than SimpleDateFormat).
+     * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd" format
+     * will be used (more efficient than SimpleDateFormat).
      */
     public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {
 
@@ -323,7 +348,8 @@ public class JSON {
                         if (dateFormat != null) {
                             return new java.sql.Date(dateFormat.parse(date).getTime());
                         }
-                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
+                        return new java.sql.Date(
+                                Instant.from(DateTimeFormatter.ISO_INSTANT.parse(date)).toEpochMilli());
                     } catch (ParseException e) {
                         throw new JsonParseException(e);
                     }
@@ -332,8 +358,7 @@ public class JSON {
     }
 
     /**
-     * Gson TypeAdapter for java.util.Date type
-     * If the dateFormat is null, ISO8601Utils will be used.
+     * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be used.
      */
     public static class DateTypeAdapter extends TypeAdapter<Date> {
 
@@ -358,7 +383,7 @@ public class JSON {
                 if (dateFormat != null) {
                     value = dateFormat.format(date);
                 } else {
-                    value = ISO8601Utils.format(date, true);
+                    value = DateTimeFormatter.ISO_INSTANT.format(date.toInstant());
                 }
                 out.value(value);
             }
@@ -377,7 +402,7 @@ public class JSON {
                             if (dateFormat != null) {
                                 return dateFormat.parse(date);
                             }
-                            return ISO8601Utils.parse(date, new ParsePosition(0));
+                            return Date.from(Instant.from(DateTimeFormatter.ISO_INSTANT.parse(date)));
                         } catch (ParseException e) {
                             throw new JsonParseException(e);
                         }
@@ -397,5 +422,4 @@ public class JSON {
         sqlDateTypeAdapter.setFormat(dateFormat);
         return this;
     }
-
 }
-- 
2.40.0

